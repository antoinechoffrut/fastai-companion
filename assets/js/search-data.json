{
  
    
        "post0": {
            "title": "",
            "content": "The Zen of Python and import * invocations . The fastai library is designed to safely invoke import * to import everything from a module. While this is often considered to go against Python&#39;s &quot;Explicit is better than implicit&quot;, this deliberate choice is explained in the fastai documentation. . It remains an instructive exercise to uncover which module contains a specific definition. Also, for debugging purposes, it may be useful at times to load only what is needed, to narrow down the range of possible sources of errors. . Monkey patching . In another notebook, we have seen that the fastai library adds convenience methods to classes from third party libraries. The use case was the method ls added to the pathlib class Path. This was done automatically via an import * invocation, which loads everything in the namespace in the specified libraries. . This notebook shows how to load the class Path and its added methods only. . . tags: programming exploration debugging python fastai . What is Path? . An expedient way to find out everything we need to know about Path is given from IPython&#39;s ? command: . from fastai2.vision.all import * Path? . The command above displays its output in a separate banner at the bottom of the page of the web browser. To access the same information directly: . from fastai2.vision.all import * import inspect print(&quot;Description for Path:&quot;) print(Path.__doc__) print(f&quot;Name of module defining Path: {inspect.getmodule(Path).__name__}&quot;) # or directly: Path.__module__ print(f&quot;Path to file with module source code: {inspect.getmodule(Path).__file__}&quot;) . Description for Path: PurePath subclass that can make system calls. Path represents a filesystem path but unlike PurePath, also offers methods to do system calls on path objects. Depending on your system, instantiating a Path will return either a PosixPath or a WindowsPath object. You can also instantiate a PosixPath or WindowsPath directly, but cannot instantiate a WindowsPath on a POSIX system or vice versa. Name of module defining Path: pathlib Path to file with module source code: /Users/antoine/.pyenv/versions/3.8.1/lib/python3.8/pathlib.py . Conclusion: Path is a class from the pathlib library, which is part of the Python install. . What is Path.ls? . The relevant information is displayed in a separate banner with: . from fastai2.vision.all import * Path.ls? . Direct access: . from fastai2.vision.all import * import inspect print(&quot;Description for Path.ls:&quot;) print((Path.ls).__doc__) print(f&quot;Name of module defining Path.ls: {inspect.getmodule(Path.ls).__name__}&quot;) # or directly: (Path.ls).__module__ print(f&quot;Path to file with module source code: {inspect.getmodule(Path.ls).__file__}&quot;) . Description for Path.ls: Contents of path as a list Name of module defining Path.ls: fastcore.utils Path to file with module source code: /Users/antoine/fastai/fastcore/fastcore/utils.py . Conclusion: the function ls has been added as a method to the class Path. It is defined in the fastcore library, which collects functionalities not depending on PyTorch, unlike fastai. . Minimal imports . If one wishes only to import Path and the attributes added by fastai, run . %xdel Path from pathlib import Path from fastcore.utils import ls print(f&quot;Name of module defining Path: {inspect.getmodule(Path).__name__}&quot;) # or directly: Path.__module__ print(f&quot;Path to file with module source code: {inspect.getmodule(Path).__file__}&quot;) print(f&quot;Name of module defining Path.ls: {inspect.getmodule(Path.ls).__name__}&quot;) # or directly: (Path.ls).__module__ print(f&quot;Path to file with module source code: {inspect.getmodule(Path.ls).__file__}&quot;) . Name of module defining Path: pathlib Path to file with module source code: /Users/antoine/.pyenv/versions/3.8.1/lib/python3.8/pathlib.py Name of module defining Path.ls: fastcore.utils Path to file with module source code: /Users/antoine/fastai/fastcore/fastcore/utils.py .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/2020/04/11/2020-04-10-slimfastai-minimal-imports.html",
            "relUrl": "/2020/04/11/2020-04-10-slimfastai-minimal-imports.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "",
            "content": "Monkey patching . &quot;We do it in fastai all the time.&quot; Jeremy Howard . (from Swift For TensorFlow AND FastAI:Part 2, featuring Chris Lattner) Monkey patching refers to the practise of dynamically modifying classes and modules. This is done quite frequently in the fastai library. . This notebook dissects one common example, namely the ls() method added to the Path class from the pathlib Python library, which functionalities reminiscent of the ls command in bash. From the fastcore documentation: . We add an ls() method to pathlib.Path which is simply defined as list(Path.iterdir()), mainly for convenience in REPL environments such as notebooks. . . tags:programming python fastai exploration . The pathlib module . The pathlib module provides functionalities to handle filesystem paths. . from pathlib import Path path = Path().home() dir_native = dir(path) print(f&quot;Path to home directory: {str(path)}&quot;) print(f&#39;Object path has attribute ls: {&quot;ls&quot; in dir_native}&#39;) . Path to home directory: /Users/antoine Object path has attribute ls: False . Supercharging Path objects with fastai . We first remove the Path class from our scope so that we can load it again via fastai (read on): . %xdel Path try: Path print(&quot;This will fail so this won&#39;t print&quot;) except NameError: print(&quot;Class `Path` has been removed.&quot;) . NameError: name &#39;Path&#39; is not defined Class `Path` has been removed. . The following will automatically load Path (among many other things): . from fastai2.vision.all import * path = Path().home() dir_fastai = dir(path) print(f&quot;Path to home directory: {str(path)}&quot;) print(f&#39;Object path has attribute ls: {&quot;ls&quot; in dir_fastai}&#39;) . Path to home directory: /Users/antoine Object path has attribute ls: True . The ls method is one of several attributes that fastai (in fact, fastcore, read on) adds to the Path class. The list of added attributes is: . set(dir_fastai) - set(dir_native) . {&#39;load&#39;, &#39;load_array&#39;, &#39;ls&#39;, &#39;read&#39;, &#39;readlines&#39;, &#39;save&#39;, &#39;save_array&#39;, &#39;write&#39;} . Loading Path and Path.ls only? . It is an instructive exercise to find out how to load Path and its attributes added in the fastai library only. This is done in another notebook. .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/2020/04/11/2020-04-08-monkey-patching-in-fastai.html",
            "relUrl": "/2020/04/11/2020-04-08-monkey-patching-in-fastai.html",
            "date": " • Apr 11, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Know your system",
            "content": "This notebook . This notebook shows how to find information about your system such as: . OS information | python version and install location | package and module versions and install locations | . My system (in a nutshell): . I work locally (mostly) on a mac; | I use pyenv as python version manager, and its plug-in pyenv-virtualenv as virtual environment manager. | . Some adjusments may be needed if you work on different platforms (especially Windows), or if you use other managers, such as conda. . . tags: system platform virtual environment management install python jupyter pytorch fastai workflow productivity . Tools and references . Python modules . sys | site | platform | . Utilities . pip: Python package management system | pyenv: Python version management system | pyenv-virtualenv: virtual environment management system | jupyter: interactive platform for scientific computing | . Helpful commands . Built-in magic commands (IPython documentation) | Python vs IPython (IPython documentation) | . Useful references . 3 ways to pip install a package - fastai2 use case by Farid Hussainia | How do I find the location of my python site packages directory? (stackoverflow) | . . Environment . System . I usually work locally on a MacBook Pro (2018). In particular I don&#39;t have a GPU (at least not a dedicated GPU). . # collapse-hide import platform print(f&quot;Platform: {platform.platform()} n&quot;) print(&quot;Details:&quot;) print(f&quot;Machine type: {platform.machine()}&quot;) print(f&quot;System: {platform.system()}&quot;) print(f&quot;Version: {platform.version()}&quot;) print(f&quot;Processor: {platform.processor()}&quot;) print(f&quot;Release: {platform.release()}&quot;) print(f&quot;Mac OS version: {platform.mac_ver()}&quot;) . . Platform: macOS-10.15.4-x86_64-i386-64bit Details: Machine type: x86_64 System: Darwin Version: Darwin Kernel Version 19.4.0: Wed Mar 4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 Processor: i386 Release: 19.4.0 Mac OS version: (&#39;10.15.4&#39;, (&#39;&#39;, &#39;&#39;, &#39;&#39;), &#39;x86_64&#39;) . Virtual environments (with pyenv) . I use pyenv to manage Python versions, and the extension pyenv-virtualenv to manage virtual environments. . !pyenv -v . pyenv 1.2.17 . To check which virtual environment is activated (with pyenv): . !pyenv version . fastai2 (set by PYENV_VERSION environment variable) . Python version . Using the sys module . # collapse-show import sys print(sys.version) # print(sys.version_info) . . 3.8.1 (default, Mar 30 2020, 15:12:05) [Clang 11.0.3 (clang-1103.0.32.29)] . Using the platform module . # collapse-show import platform print(f&quot;Python: version {platform.python_version()}&quot;) print(f&quot;Python build: {platform.python_build()}&quot;) . . Python: version 3.8.1 Python build: (&#39;default&#39;, &#39;Mar 30 2020 15:12:05&#39;) . A convoluted alternative . !python --version . Python 3.8.1 . Installed packages . List of all packlages with pip . # !pip freeze # uncomment to see full list . Note that those lines beginning with -e correspond to packages installed in editable mode. For example, following Farid Hassainia&#39;s post, I have an editable install of fastai2: . Check specific packages . Check that fastai2 is installed . !pip freeze | grep fastai2 . -e git+https://github.com/fastai/fastai2@a35329dafb77510d82a46bb9dc92697f5a2e4a06#egg=fastai2 . Otherwise, packages installed via pip are listed as usual. Check that (e.g.). numpy is installed: . !pip freeze | grep numpy . numpy==1.18.2 . Package versions . Using the __version__ attribute . # collapse-show import torch print(f&quot;{torch.__name__:&lt;12}: version {torch.__version__}&quot;) import fastai2 print(f&quot;{fastai2.__name__:&lt;12}: version {fastai2.__version__}&quot;) . . torch : version 1.4.0 fastai2 : version 0.0.17 . Locating the Python install (and chasing symlinks) . Using sys . Returns absolute path to python executable . # collapse-show import sys sys.executable . . &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/bin/python3.8&#39; . Actually, this is a symlink: . !ls -l /Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/bin/python3.8 . lrwxr-xr-x 1 antoine staff 50 2 Apr 10:56 /Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/bin/python3.8 -&gt; /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8 . !ls -l /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8 . -rwxr-xr-x 1 antoine staff 3572068 30 Mar 15:12 /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8 . This is the executable: . !file /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8 . /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8: Mach-O 64-bit executable x86_64 . Using bash command which . Remark: pyenv uses shims, and running the comand which python in the cell below returns a different output if run from a terminal. Instead, run pyenv which python. . !which python . /Users/antoine/.pyenv/versions/fastai2/bin/python . This is a symlink: . !ls -l /Users/antoine/.pyenv/versions/fastai2/bin/python . lrwxr-xr-x 1 antoine staff 9 2 Apr 10:56 /Users/antoine/.pyenv/versions/fastai2/bin/python -&gt; python3.8 . What does it point to? . !type python3.8 . python3.8 is /Users/antoine/.pyenv/versions/fastai2/bin/python3.8 . This is again a symlink: . !ls -l /Users/antoine/.pyenv/versions/fastai2/bin/python3.8 . lrwxr-xr-x 1 antoine staff 50 2 Apr 10:56 /Users/antoine/.pyenv/versions/fastai2/bin/python3.8 -&gt; /Users/antoine/.pyenv/versions/3.8.1/bin/python3.8 . which we have seen above. . Locating packages . Read the __path__ attribute . For a package installe via pip in the usual way: . import numpy numpy.__path__ . [&#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/lib/python3.8/site-packages/numpy&#39;] . For an editable install, from a local copy of the repository: . import fastai2 fastai2.__path__ . [&#39;/Users/antoine/fastai/fastai2/fastai2&#39;] . Using !pip show . !pip show numpy | grep Location # !pip show numpy # uncomment to see more info on package . Location: /Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/lib/python3.8/site-packages . For an editable install: . !pip show fastai2 | grep Location #!pip show fastai2 # uncomment to see more info on package . Location: /Users/antoine/fastai/fastai2 . Search path for modules: sys.path . Python looks for paths to modules by looking into a list of directories in sys.path: . import sys sys.path . [&#39;/Users/antoine/fastai/fastai-companion/_notebooks&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python38.zip&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python3.8&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python3.8/lib-dynload&#39;, &#39;&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/lib/python3.8/site-packages&#39;, &#39;/Users/antoine/fastai/fastai2&#39;, &#39;/Users/antoine/fastai/fastcore&#39;, &#39;/Users/antoine/fastai/nbdev&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/lib/python3.8/site-packages/IPython/extensions&#39;, &#39;/Users/antoine/.ipython&#39;] . List of all global site-packages directories . Packages are normally installed in the site-packages folder of the Python installation. This directory can be found using the site module: . import site site.getsitepackages() . [&#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2/lib/python3.8/site-packages&#39;] .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/system/2020/03/31/know-your-system.html",
            "relUrl": "/system/2020/03/31/know-your-system.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "I am a mathematician by training, with about a decade of research experience in academia, where I specialized in the analysis of partial differential equations. . Recently my interests turned to data science, particularly neural networks. .",
          "url": "https://antoinechoffrut.github.io/fastai-companion/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}