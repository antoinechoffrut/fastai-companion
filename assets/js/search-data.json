{
  
    
        "post0": {
            "title": "Know your system",
            "content": "This notebook shows how to find information about your system such as: . OS information | python version and install location | package and module versions and install locations | . My system (in a nutshell): . I work locally (mostly) on a mac; | I use pyenv as python version manager, and its plug-in pyenv-virtualenv as virtual environment manager. | . Some adjusments may be needed if you work on different platforms (especially Windows), or if you use other managers, such as conda. . . tags: system platform virtual environment management install python jupyter pytorch fastai workflow productivity . Tools and references . Python modules: . sys | site | platform | . Utilities . pip: Python package management system | pyenv: Python version management system | pyenv-virtualenv: virtual environment management system | jupyter: interactive platform for scientific computing | . Helpful commands . Built-in magic commands (IPython documentation) | Python vs IPython (IPython documentation) | . Useful references . 3 ways to pip install a package - fastai2 use case by Farid Hussainia | How do I find the location of my python site packages directory? (stackoverflow) | . Environment . System . I usually work locally on a MacBook Pro (2018). In particular I don&#39;t have a GPU (at least not a dedicated GPU). . import platform print(f&quot;Platform: {platform.platform()} n&quot;) print(&quot;Details:&quot;) print(f&quot;Machine type: {platform.machine()}&quot;) print(f&quot;System: {platform.system()}&quot;) print(f&quot;Version: {platform.version()}&quot;) print(f&quot;Processor: {platform.processor()}&quot;) print(f&quot;Release: {platform.release()}&quot;) print(f&quot;Mac OS version: {platform.mac_ver()}&quot;) . Platform: macOS-10.15.4-x86_64-i386-64bit Details: Machine type: x86_64 System: Darwin Version: Darwin Kernel Version 19.4.0: Wed Mar 4 22:28:40 PST 2020; root:xnu-6153.101.6~15/RELEASE_X86_64 Processor: i386 Release: 19.4.0 Mac OS version: (&#39;10.15.4&#39;, (&#39;&#39;, &#39;&#39;, &#39;&#39;), &#39;x86_64&#39;) . Virtual environments . I use pyenv to manage Python versions, and the extension pyenv-virtualenv to manage virtual environments. . To check which virtual environment is activated (with pyenv): . # !pyenv version . Python version . # Using the `sys` module import sys # print(f&quot;Python: version {&#39;.&#39;.join([str(item) for item in sys.version_info[0:3]])}&quot;) print(sys.version) . 3.8.1 (default, Mar 30 2020, 15:12:05) [Clang 11.0.3 (clang-1103.0.32.29)] . # Using the `platform` module import platform print(f&quot;Python: version {platform.python_version()}&quot;) print(f&quot;Python build: {platform.python_build()}&quot;) . Python: version 3.8.1 Python build: (&#39;default&#39;, &#39;Mar 30 2020 15:12:05&#39;) . # Convoluted alternative !python --version . Python 3.8.1 . Package installation . List of packages . # Packages installed with `pip` # !pip freeze # uncomment to obtain long list . Note that those lines beginning with -e correspond to packages installed in editable mode. For example, following Farid Hassainia&#39;s post, I have an editable install of fastai2: . # Check `fastai2` is installed !pip freeze | grep fastai2 . -e git+https://github.com/fastai/fastai2@8d229f2a01ac8f0a02ad86db954f7e3e48928bd9#egg=fastai2 . Otherwise, packages installed via pip are listed as usual: . # Check `numpy` is installed !pip freeze | grep numpy . numpy==1.18.2 . Package versions . # Read the `__version__` attribute import torch print(f&quot;{torch.__name__:&lt;12}: version {torch.__version__}&quot;) import fastai2 print(f&quot;{fastai2.__name__:&lt;12}: version {fastai2.__version__}&quot;) . torch : version 1.4.0 fastai2 : version 0.0.16 . Locating the Python install . # Using `which` (Unix-like systems) !which python . /Users/antoine/.pyenv/versions/fastai2python381/bin/python . # Using `pyenv which` (Unix-like systems) !pyenv which python . /Users/antoine/.pyenv/versions/fastai2python381/bin/python . # Using `sys` to get absolute path to `python` executable import sys sys.executable . &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/bin/python3.8&#39; . Locating packages . Example with numpy . # Read the `__path__` attribute import numpy numpy.__path__ . [&#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/lib/python3.8/site-packages/numpy&#39;] . # More info with `pip show` !pip show numpy | grep Location # !pip show numpy # uncomment to see more info on package . Location: /Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/lib/python3.8/site-packages . Example with fastai2 . This is an editable install, from a local copy of the repository: . # Using `pip show` !pip show fastai2 | grep Location #!pip show fastai2 . Location: /Users/antoine/Computing/fastai2 . Search path for modules . Python looks for paths to modules by looking into a list of directories in sys.path: . # `sys.path` import sys sys.path . [&#39;/Users/antoine/Computing/fastai-course-v4-companion&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python38.zip&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python3.8&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/lib/python3.8/lib-dynload&#39;, &#39;&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/lib/python3.8/site-packages&#39;, &#39;/Users/antoine/Computing/fastai2&#39;, &#39;/Users/antoine/Computing/fastcore&#39;, &#39;/Users/antoine/Computing/nbdev&#39;, &#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/lib/python3.8/site-packages/IPython/extensions&#39;, &#39;/Users/antoine/.ipython&#39;] . List of all global site-packages directories . Packages are normally installed in the site-packages folder of the Python installation. This directory can be found using the site module: . # List of all global site-package directories import site site.getsitepackages() . [&#39;/Users/antoine/.pyenv/versions/3.8.1/envs/fastai2python381/lib/python3.8/site-packages&#39;] .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/workflow/2020/03/31/know-your-system.html",
            "relUrl": "/workflow/2020/03/31/know-your-system.html",
            "date": " • Mar 31, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://antoinechoffrut.github.io/fastai-companion/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://antoinechoffrut.github.io/fastai-companion/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": "I am a mathematician by training, with about a decade of research experience in academia, where I specialized in the analysis of partial differential equations. . Recently my interests turned to data science, particularly neural networks. .",
          "url": "https://antoinechoffrut.github.io/fastai-companion/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}